name: 'Genesis Kit Build, Test & Spec Check'
description: 'Builds Genesis kit, runs spec tests, checks for breaking changes, and tests deployment'
author: 'Genesis Community'

inputs:
  kit_name:
    description: 'Name of the Genesis kit'
    required: true
  version_bump:
    description: 'Type of version bump (patch, minor, major)'
    required: false
    default: 'patch'
  debug_mode:
    description: 'Skip testing and just create PR for release'
    required: false
    default: 'false'
  go_version:
    description: 'Go version to use for tests'
    required: false
    default: 'go1.23.5.linux-amd64.tar.gz'
  ginkgo_params:
    description: 'Ginkgo test parameters'
    required: false
    default: '-p'
  deploy_env:
    description: 'Deployment environment for testing'
    required: false
    default: 'ci-vsphere-baseline'
  iaas_provider:
    description: 'Infrastructure type (vsphere, aws, gcp, etc)'
    required: false
    default: 'vsphere'
  release_branch:
    description: 'Branch to create PR against for releases'
    required: false
    default: 'main'
  ci_envs_path:
    description: 'Path to deployment environment files'
    required: false
    default: 'ci/envs'
  ci_hooks_path:
    description: 'Path to CI hook scripts'
    required: false
    default: 'ci/ci-hooks'
  # Infrastructure credentials
  aws_access_key_id:
    description: 'AWS Access Key ID'
    required: false
  aws_secret_access_key:
    description: 'AWS Secret Access Key'
    required: false
  gcp_service_account_key:
    description: 'GCP Service Account Key'
    required: false
  vsphere_username:
    description: 'vSphere Username'
    required: false
  vsphere_password:
    description: 'vSphere Password'
    required: false
  # Genesis/BOSH credentials
  secrets_base:
    description: 'Genesis secrets base'
    required: false
  secrets_token:
    description: 'Genesis secrets token'
    required: false
  secrets_key:
    description: 'Genesis secrets key'
    required: false
  bosh_client:
    description: 'BOSH client'
    required: false
  bosh_client_secret:
    description: 'BOSH client secret'
    required: false
  bosh_environment:
    description: 'BOSH environment'
    required: false
  bosh_ca_cert:
    description: 'BOSH CA certificate'
    required: false
  secrets_seed_data:
    description: 'Seed data for secrets'
    required: false
  github_token:
    description: 'GitHub token for operations'
    required: true

outputs:
  version:
    description: 'The new version number'
    value: ${{ steps.version.outputs.new_version }}
  previous_version:
    description: 'The previous version number'
    value: ${{ steps.version.outputs.previous_version }}
  has_breaking_changes:
    description: 'Whether breaking changes were detected'
    value: ${{ steps.check-breaking.outputs.has_breaking_changes }}
  is_release_commit:
    description: 'Whether the commit message indicates a release'
    value: ${{ steps.check-release-commit.outputs.is_release }}
  release_version:
    description: 'Version to release from commit message'
    value: ${{ steps.check-release-commit.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Initialize hook paths
      shell: bash
      run: |
        echo "::group::Initializing hook and environment paths"
        # Create hook finder script
        cat > ${{ github.action_path }}/find-hooks.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Usage: find-hooks.sh <pre|post> <workflow> <job> <step>
        # Example: find-hooks.sh pre action build-test "Setup tools"
        
        HOOK_TYPE="$1"   # pre or post
        WORKFLOW="$2"    # workflow name (without .yml)
        JOB="$3"         # job name with dashes
        STEP="$4"        # step name with spaces replaced by dashes
        
        # Replace spaces with dashes in step name
        STEP_NORMALIZED="${STEP// /-}"
        
        # Primary and alternate hook paths
        CI_HOOKS_PATH="${CI_HOOKS_PATH:-ci/ci-hooks}"
        ALT_HOOKS_PATH="${ALT_HOOKS_PATH:-.github/ci-hooks}"
        
        # Base pattern for hook scripts
        HOOK_PATTERN="${HOOK_TYPE}-${WORKFLOW}_${JOB}_${STEP_NORMALIZED}*"
        
        # Find hooks in primary path
        if [[ -d "$CI_HOOKS_PATH" ]]; then
          find "$CI_HOOKS_PATH" -name "$HOOK_PATTERN" -type f 2>/dev/null | sort || true
        fi
        
        # Find hooks in alternate path
        if [[ -d "$ALT_HOOKS_PATH" ]]; then
          find "$ALT_HOOKS_PATH" -name "$HOOK_PATTERN" -type f 2>/dev/null | sort || true
        fi
        EOF
        
        chmod +x ${{ github.action_path }}/find-hooks.sh
        
        # Set environment variables for hook paths
        echo "CI_HOOKS_PATH=${{ inputs.ci_hooks_path }}" >> $GITHUB_ENV
        echo "ALT_HOOKS_PATH=.github/ci-hooks" >> $GITHUB_ENV
        
        # Set environment variables for env paths
        echo "CI_ENVS_PATH=${{ inputs.ci_envs_path }}" >> $GITHUB_ENV
        echo "ALT_ENVS_PATH=.github/envs" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: Setup tools
      shell: bash
      run: |
        echo "::group::Setting up required tools"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Setup tools"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/setup-tools.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Setup tools"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # VERSION MANAGEMENT
    - name: Get current version
      id: current
      shell: bash
      run: |
        echo "::group::Getting current version"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Get current version"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/get-current-version.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Get current version"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    - name: Bump version
      id: version
      shell: bash
      env:
        VERSION_BUMP: ${{ inputs.version_bump }}
        CURRENT_VERSION: ${{ steps.current.outputs.current_version }}
      run: |
        echo "::group::Bumping version from ${{ steps.current.outputs.current_version }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Bump version"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/bump-version.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Bump version"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # Check if this is a release commit
    - name: Check for release commit
      id: check-release-commit
      shell: bash
      run: |
        echo "::group::Checking if this is a release commit"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Check for release commit"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/check-release-commit.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Check for release commit"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # BUILD KIT (Required even in debug mode)
    - name: Build Kit
      shell: bash
      env:
        GENESIS_SECRETS_BASE: ${{ inputs.secrets_base }}
        GENESIS_SECRETS_TOKEN: ${{ inputs.secrets_token }}
        GENESIS_SECRETS_KEY: ${{ inputs.secrets_key }}
        KIT_NAME: ${{ inputs.kit_name }}
        KIT_VERSION: ${{ steps.version.outputs.new_version }}
        BUILD_ROOT: "build"
      run: |
        echo "::group::Building Genesis Kit ${{ inputs.kit_name }} v${{ steps.version.outputs.new_version }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Build Kit"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/build-kit.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Build Kit"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # Conditionally run testing steps
    - name: Setup debug mode
      if: inputs.debug_mode == 'true'
      id: check-breaking-debug
      shell: bash
      env:
        KIT_NAME: ${{ inputs.kit_name }}
        VERSION: ${{ steps.version.outputs.new_version }}
      run: |
        echo "::group::Setting up debug mode and skipping tests"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Setup debug mode"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/setup-debug-mode.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Setup debug mode"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # RUN SPEC TESTS - Skip in debug mode
    - name: Setup Go for tests
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        GO_VERSION: ${{ inputs.go_version }}
      run: |
        echo "::group::Setting up Go ${{ inputs.go_version }} for tests"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Setup Go for tests"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/setup-go.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Setup Go for tests"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    - name: Run Spec Tests
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        GENESIS_SECRETS_BASE: ${{ inputs.secrets_base }}
        GENESIS_SECRETS_TOKEN: ${{ inputs.secrets_token }}
        GENESIS_SECRETS_KEY: ${{ inputs.secrets_key }}
        KIT_VERSION: ${{ steps.version.outputs.new_version }}
        GINKGO_PARAMS: ${{ inputs.ginkgo_params }}
      run: |
        echo "::group::Running specification tests with Ginkgo ${{ inputs.ginkgo_params }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Run Spec Tests"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/run-spec-tests.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Run Spec Tests"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # SPEC CHANGE CHECK - Skip in debug mode
    - name: Check Specs for breaking changes
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        CURRENT_VERSION: ${{ steps.version.outputs.new_version }}
        PREVIOUS_VERSION: ${{ steps.version.outputs.previous_version }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
        ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "::group::Checking specifications for breaking changes"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Check Specs for breaking changes"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/check-specs.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Check Specs for breaking changes"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    - name: Check for breaking changes
      if: inputs.debug_mode != 'true'
      id: check-breaking
      shell: bash
      run: |
        echo "::group::Analyzing breaking change report"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Check for breaking changes"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/check-breaking-changes.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Check for breaking changes"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # INFRASTRUCTURE SETUP FOR DEPLOYMENT - Skip in debug mode
    - name: Setup Infrastructure
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        GCP_SERVICE_ACCOUNT_KEY: ${{ inputs.gcp_service_account_key }}
        VSPHERE_USERNAME: ${{ inputs.vsphere_username }}
        VSPHERE_PASSWORD: ${{ inputs.vsphere_password }}
        IAAS_PROVIDER: ${{ inputs.iaas_provider }}
      run: |
        echo "::group::Setting up ${{ inputs.iaas_provider }} infrastructure"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Setup Infrastructure"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/setup-infrastructure.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Setup Infrastructure"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"
    
    # VAULT SETUP - Skip in debug mode
    - name: Setup Vault
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "::group::Setting up HashiCorp Vault"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Setup Vault"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/setup-vault.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Setup Vault"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # DEPLOYMENT TEST - Skip in debug mode
    - name: Deploy and Test
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        DEPLOY_ENV: ${{ inputs.deploy_env }}
        CI_ROOT: "${{ github.workspace }}/git-ci"
        GITHUB_WORKSPACE: ${{ github.workspace }}
        GENESIS_SECRETS_BASE: ${{ inputs.secrets_base }}
        GENESIS_SECRETS_TOKEN: ${{ inputs.secrets_token }}
        GENESIS_SECRETS_KEY: ${{ inputs.secrets_key }}
        GENESIS_STACK_TRACE: "yes"
        BOSH_CLIENT: ${{ inputs.bosh_client }}
        BOSH_CLIENT_SECRET: ${{ inputs.bosh_client_secret }}
        BOSH_ENVIRONMENT: ${{ inputs.bosh_environment }}
        BOSH_CA_CERT: ${{ inputs.bosh_ca_cert }}
        SECRETS_SEED_DATA: ${{ inputs.secrets_seed_data }}
        KIT_VERSION: ${{ steps.version.outputs.new_version }}
        KIT_SHORTNAME: ${{ inputs.kit_name }}
        BUILD_ROOT: "build"
        ACTION_PATH: ${{ github.action_path }}
        CI_ENVS_PATH: ${{ env.CI_ENVS_PATH }}
        ALT_ENVS_PATH: ${{ env.ALT_ENVS_PATH }}
      run: |
        echo "::group::Deploying and testing to ${{ inputs.deploy_env }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Deploy and Test"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        
        # Modify deploy-and-test.sh to use configurable environment paths
        cat > ${{ github.action_path }}/ci/scripts/actions/deploy-and-test-patched.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ"
        echo "üîç DEBUG: Starting deployment test to environment $DEPLOY_ENV"
        sudo mkdir -p $CI_ROOT/ci/
        sudo chmod a+rwx $CI_ROOT/ci/
        echo "üîç DEBUG: Setting up CI scripts and environments"
        cp -r $ACTION_PATH/ci/scripts/* $CI_ROOT/ci/ci/scripts/

        # Primary and alternate environment paths
        PRIMARY_ENVS_PATH="${CI_ENVS_PATH:-ci/envs}"
        ALT_ENVS_PATH="${ALT_ENVS_PATH:-.github/envs}"

        # First try primary path
        if [[ -d "./${PRIMARY_ENVS_PATH}" ]]; then
          echo "üîç DEBUG: Using environment files from ${PRIMARY_ENVS_PATH}"
          mkdir -p $CI_ROOT/ci/envs/
          cp -r "./${PRIMARY_ENVS_PATH}/"* $CI_ROOT/ci/envs/
        # Then try alternate path
        elif [[ -d "./${ALT_ENVS_PATH}" ]]; then
          echo "üîç DEBUG: Using environment files from ${ALT_ENVS_PATH}"
          mkdir -p $CI_ROOT/ci/envs/
          cp -r "./${ALT_ENVS_PATH}/"* $CI_ROOT/ci/envs/
        else
          echo "‚ö†Ô∏è ERROR: No environment files found in ${PRIMARY_ENVS_PATH} or ${ALT_ENVS_PATH}"
          exit 1
        fi

        # Verify environment file exists
        if [[ ! -f "$CI_ROOT/ci/envs/${DEPLOY_ENV}.yml" ]]; then
          echo "‚ö†Ô∏è ERROR: Environment file ${DEPLOY_ENV}.yml not found"
          echo "Available environments:"
          ls -la "$CI_ROOT/ci/envs/"
          exit 1
        fi

        echo "üîç DEBUG: Launching deployment script"
        $ACTION_PATH/ci/scripts/deploy.sh
        echo "‚úÖ Deployment and testing completed successfully"
        echo "üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ"
        EOF
        
        chmod +x ${{ github.action_path }}/ci/scripts/actions/deploy-and-test-patched.sh
        ${{ github.action_path }}/ci/scripts/actions/deploy-and-test-patched.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Deploy and Test"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # GENERATE RELEASE NOTES - Simplified in debug mode
    - name: Generate Release Notes
      if: inputs.debug_mode != 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        KIT_SHORTNAME: ${{ inputs.kit_name }}
        RELEASE_NOTES_FILE: "release-notes.md"
        VERSION: ${{ steps.version.outputs.new_version }}
        ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "::group::Generating release notes for v${{ steps.version.outputs.new_version }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Generate Release Notes"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/generate-release-notes.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Generate Release Notes"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    # CREATE PR FOR RELEASE OR MANUAL TRIGGER
    - name: Create Pull Request for Release
      if: steps.check-release-commit.outputs.is_release == 'true' || inputs.debug_mode == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        KIT_NAME: ${{ inputs.kit_name }}
        VERSION: ${{ steps.check-release-commit.outputs.is_release == 'true' && steps.check-release-commit.outputs.version || steps.version.outputs.new_version }}
        RELEASE_BRANCH: ${{ inputs.release_branch }}
        DEBUG_MODE: ${{ inputs.debug_mode }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "::group::Creating pull request for release v${{ steps.check-release-commit.outputs.is_release == 'true' && steps.check-release-commit.outputs.version || steps.version.outputs.new_version }}"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Create Pull Request for Release"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/create-pr.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Create Pull Request for Release"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"

    - name: Add explanation comment to PR
      if: (steps.check-release-commit.outputs.is_release == 'true' || inputs.debug_mode == 'true')
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        KIT_NAME: ${{ inputs.kit_name }}
        VERSION: ${{ steps.check-release-commit.outputs.is_release == 'true' && steps.check-release-commit.outputs.version || steps.version.outputs.new_version }}
        PR_COMMENT_FILE: "${{ github.action_path }}/docs/pr-comment-template.md"
        DEBUG_MODE: ${{ inputs.debug_mode }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        ACTION_PATH: ${{ github.action_path }}
        RELEASE_BRANCH: ${{ inputs.release_branch }}
      run: |
        echo "::group::Adding explanation comment to pull request"
        
        # Run pre-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh pre action build-test "Add explanation comment to PR"); do
          echo "ü™ù Executing pre-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        # Execute main step
        chmod -R +x ${{ github.action_path }}/ci/scripts
        ${{ github.action_path }}/ci/scripts/actions/add-pr-comment.sh
        
        # Run post-hooks
        for hook in $(${{ github.action_path }}/find-hooks.sh post action build-test "Add explanation comment to PR"); do
          echo "ü™ù Executing post-hook: $(basename $hook)"
          chmod +x "$hook"
          "$hook"
        done
        
        echo "::endgroup::"